// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array bits;
	static int color;
    /** Initializes the Screen. */
    function void init() {
		var int power, it;
		let bits = Array.new(16);
		let power = 1;
		let it = 0;
		while(it < 16 ){
			let bits[it] = power;
			let power = power + power;
			let it = it + 1;
		}
		let color = 1;
		return;
	}

    /** Erases the entire screen. */
    function void clearScreen() {
		var int start;
		let start = 16384;
		while(start < 24576){
			do Memory.poke(start, 0);
			let start = start + 1;
		}
	return;	
	}

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		if (b){
			let color = 1;
		}
		else {
			let color = 0;
		}
		return;
	}
	
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, value, bit, v;
		let address = (32 * y) + (x / 16);
		let value = Memory.peek(16384 + address);
		let bit = x - ((x / 16 ) * 16);
		if (color = 0){
			let value = value & (~bits[bit]);
		}
		else{
			
			let value = value | bits[bit];
		}	
		do Memory.poke(16384 + address, value);
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a, b, diff, dx, dy, sign, sign1;
		let dx = x2 - x1;
		let dy = y2 - y1;
		let sign = 1;
		let sign1 = 1;
		if(dy < 0){
			let sign = -1;
		}
		if(dx < 0){
			let sign1 = -1;
		}
		let a = 0;
		let b = 0;
		let diff = 0;
		if(dx = 0){
				while(~(b > Math.abs(dy))){
					do Screen.drawPixel(x1, y1 + (b * sign));
					let b = b + 1;
				}
		}
		else{
			if(dy = 0){
				while(~(a > Math.abs(dx))){
					do Screen.drawPixel(x1 + (a * sign1) , y1);
					let a = a + 1;
				}
			}
			else{
				while((~(a > Math.abs(dx))) & (~(b > Math.abs(dy)))){
						do Screen.drawPixel(x1 + (a * sign1), y1 + (b * sign));
						if(diff < 0){
							let a = a + 1;
							let diff = diff + Math.abs(dy);
						}
						else{
							let b = b + 1;
							let diff = diff - Math.abs(dx);
						}
				}
			}
		}
		
		
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int i, dy;
		let i = 0;
		let dy = y2 - y1;
		let dy = dy ;
		while(i < dy){
			
			do Screen.drawLine(x1, y1 + i, x2, y1 + i);
			
			let i = i + 1;
		}
		return;
	}

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		
		var int dy, line;
		let dy = -r;
		while(~(dy > r)){
			let line = Math.sqrt((r * r) - (dy * dy));
			do Screen.drawLine(x - line, y + dy, x + line, y + dy);
			do Screen.drawPixel(x + line + 1, y + dy);
			do Screen.drawPixel(x - line - 1, y + dy);
			let dy = dy + 1;
		}
		
		return;
	}
}
