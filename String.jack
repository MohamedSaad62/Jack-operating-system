// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength > 0){
			let str = Array.new(maxLength);
		}
		else{
			let str = -1;
		}
		//do Output.printInt(str);
		let len = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if(~(str = -1)){
			do Memory.deAlloc(str);
		}
		return;
	}

    /** Returns the current length of this string. */
    method int length() {
		return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		
		let str[len] = c;
		let len = len + 1;
		return this;
    }
	method void appendChar1(char c) {
		
		let str[len] = c;
		let len = len + 1;
		return;
    }
    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let len = len - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int sign, it, val;
		let val = 0;
		if(str[0] = 45){
			let sign = -1;
			let it = 1;
		}
		else{
			let sign = 1;
			let it = 0;
		}
		while(it < len){
			let val = (val * 10) + (str[it] - 48);
			let it = it + 1;
		}
		return val * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt1(int val) {
		var int  c;
		let c = val - ((val / 10) * 10);
		let c = c + 48;
		if(val < 10){
			
			do appendChar1(c);
			return;
		}
		else{
			do setInt1(val / 10);
			do appendChar1(c);
		}
		return;
    }
	method void setInt(int val) {
		let len = 0;
		if(val < 0){
			let val = val * -1;
			do appendChar1(45);
		}
		do setInt1(val);
		return;
    }
    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
